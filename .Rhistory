add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
# Writing to a CSV file
write.csv(edges_subset, "/Users/smahajan/Documents/green_index/new/helsinki_Aurinkolahti.csv", row.names = FALSE)
zurich_bbox <- opq(bbox = "Vuosaari, Helsinki, Finland")
# Download highways
highways_data <- zurich_bbox %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Add more green area types and download data
green_areas_data <- zurich_bbox %>%
add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
# Writing to a CSV file
write.csv(edges_subset, "/Users/smahajan/Documents/green_index/new/helsinki_Vuosaari.csv", row.names = FALSE)
zurich_bbox <- opq(bbox = "Vuosaari, Helsinki, Finland")
# Download highways
highways_data <- zurich_bbox %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Add more green area types and download data
green_areas_data <- zurich_bbox %>%
add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
zurich_bbox <- opq(bbox = "Kallahti, Helsinki, Finland")
# Download highways
highways_data <- zurich_bbox %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Add more green area types and download data
green_areas_data <- zurich_bbox %>%
add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
# Writing to a CSV file
write.csv(edges_subset, "/Users/smahajan/Documents/green_index/new/helsinki_kallahti.csv", row.names = FALSE)
zurich_bbox <- opq(bbox = "Marjaniemi, Helsinki, Finland")
# Download highways
highways_data <- zurich_bbox %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Add more green area types and download data
green_areas_data <- zurich_bbox %>%
add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
# Writing to a CSV file
write.csv(edges_subset, "/Users/smahajan/Documents/green_index/new/helsinki_marjanemi.csv", row.names = FALSE)
zurich_bbox <- opq(bbox = "Herttoniemenranta, Helsinki, Finland")
# Download highways
highways_data <- zurich_bbox %>%
add_osm_feature(key = "highway") %>%
osmdata_sf()
# Add more green area types and download data
green_areas_data <- zurich_bbox %>%
add_osm_feature(key = "landuse", value = c("park", "forest", "recreation_ground", "allotments", "meadow", "grass", "garden", "farmland", "nature_reserve")) %>%
osmdata_sf()
# Download trees
trees_data <- zurich_bbox %>%
add_osm_feature(key = "natural", value = "tree") %>%
osmdata_sf()
edges <- highways_data$osm_lines %>%
st_transform(crs = 5116) %>%
as_tibble() %>%
select(osm_id, name, geometry)
green_areas <- green_areas_data$osm_polygons %>%
st_transform(crs = 5116) %>%
st_union()
trees <- trees_data$osm_points %>%
st_transform(crs = 5116)
st_crs(green_areas) <- st_crs(edges)
st_crs(trees) <- st_crs(edges)
distance_decay_green_area <- function(edge, green_area) {
distance_to_green_area <- st_distance(edge, green_area)
area_size <- st_area(green_area)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(distance_to_green_area/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
distance_decay_tree <- function(edge, trees) {
distances_to_trees <- st_distance(edge, trees)
min_distance_to_tree <- min(distances_to_trees)
D <- 100 # adjust this value as per your understanding of typical decay range
decay_function <- exp(-(min_distance_to_tree/D))
decay_function <- pmax(pmin(decay_function, 1), 0)
return(decay_function)
}
# Calculate green indices separately for green areas and trees
edges <- edges %>%
mutate(
green_index_green_area = map_dbl(st_geometry(geometry), function(x) sum(map_dbl(green_areas, distance_decay_green_area, edge = x), na.rm = TRUE)),
green_index_tree = map_dbl(st_geometry(geometry), function(x) distance_decay_tree(x, trees))
)
# Compute normalized green index
edges <- edges %>%
mutate(
green_index = (green_index_green_area + green_index_tree) / 2,
green_index = (green_index - min(green_index)) / (max(green_index) - min(green_index))
)
# Define the color range for the gradient
colors <- c("#F0BB62", "#BFDB38", "#367E18")
edges_sf <- st_as_sf(edges)
text_size <- 14
resolution <- 350
# Update the plot code
plot <- ggplot() +
geom_sf(data = edges_sf, aes(color = green_index), size = 0.5) +
scale_color_gradientn(colors = colors) +
theme_minimal() +
theme(text = element_text(size = text_size))
plot
edges_subset <- edges %>% select(osm_id, name, green_index)
# Writing to a CSV file
write.csv(edges_subset, "/Users/smahajan/Documents/green_index/new/helsinki_Herttoniemenranta.csv", row.names = FALSE)
library(osmdata)
library(sf)
library(dplyr)
zurich <- getbb("Lausanne, Switzerland") %>% opq() %>%
add_osm_feature(key='highway') %>% osmdata_sf()
roads <- zurich$osm_lines
buildings <- zurich$osm_polygons[which(zurich$osm_polygons$building != ""), ]
landuse <- zurich$osm_polygons[which(zurich$osm_polygons$landuse != ""), ]
natural <- zurich$osm_polygons[which(zurich$osm_polygons$natural != ""), ]
railways <- zurich$osm_lines[which(zurich$osm_lines$railway != ""), ]
roads$noise_index <- case_when(
roads$highway == "motorway" ~ 4,
roads$highway == "primary" ~ 3,
roads$highway == "secondary" ~ 2,
TRUE ~ 1
)
for (i in 1:nrow(roads)) {
if (min(st_distance(roads[i, ], buildings)) < 50) { # 50 meters
roads$noise_index[i] <- roads$noise_index[i] - 1
}
}
# Convert roads and buildings to the same coordinate reference system
roads <- st_transform(roads, crs = st_crs(buildings))
# 5. Adjust Noise Levels Based on Proximity to Buildings
# Here we are assuming that roads closer to buildings are quieter due to noise shielding effects of buildings.
for (i in 1:nrow(roads)) {
if (min(st_distance(roads[i, ], buildings)) < 50) { # 50 meters
roads$noise_index[i] <- roads$noise_index[i] - 1
}
}
# Convert roads and buildings to the same coordinate reference system
roads <- st_transform(roads, crs = st_crs(buildings))
# 5. Adjust Noise Levels Based on Proximity to Buildings
# Here we are assuming that roads closer to buildings are quieter due to noise shielding effects of buildings.
for (i in 1:nrow(roads)) {
if (units::set_units(st_distance(roads[i, ], buildings), "m") < 50) { # 50 meters
roads$noise_index[i] <- roads$noise_index[i] - 1
}
}
library(osmdata)
library(noisemodelling)
library(osmdata)
library(dplyr)
osm <- opq(bbox = "Lausanne, Switzerland")
# Extract the highway tags
highways <- osm$osm_lines[osm$osm_lines$tags$highway %in% c("motorway", "trunk")]
# Calculate the amount of traffic on each road
traffic <- highways %>%
count(tags.highway) %>%
rename(traffic = n)
setwd("/Users/smahajan/Documents/green_index/R/greenR/")
devtools::document()
library(greenR)
run_app()
run_app()
run_app()
setwd("/Users/smahajan/Documents/green_index/R/greenR/")
git init
setwd("/Users/smahajan/Documents/green_index/R/greenR/")
library(greenR)
run_app()
devtools::document()
devtools::document()
devtools::install()
library(greenR)
devtools::install()
library(greenR)
devtools::install_github()
devtools::install_github()
remotes::install_github("sachit27/greenR", dependencies = TRUE)
remotes::install_github("sachit27/greenR", dependencies = TRUE, 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)
devtools::install()
library(greenR)
data <- get_osm_data("Oerlikon, Zurich, Switzerland")
index <- calculate_green_index(data, 2056, 100)
save_as_leaflet(index, "/Users/smahajan/Downloads/leaflet.html")
save_as_leaflet(index, "/Users/smahajan/Downloads/leaflet.html")
devtools::install()
save_as_leaflet(index, "/Users/smahajan/Downloads/leaflet.html")
library(greenR)
data <- get_osm_data("Oerlikon, Zurich, Switzerland")
devtools::install()
library(greenR)
data <- get_osm_data("Oerlikon, Zurich, Switzerland")
index <- calculate_green_index(data, 2056)
save_as_leaflet(index, "/Users/smahajan/Downloads/map.html")
devtools::install()
library(greenR)
data <- get_osm_data("Oerlikon, Zurich, Switzerland")
index <- calculate_green_index(data, 2056)
map <- save_as_leaflet(index, "/Users/smahajan/Downloads/map.html")
devtools::install()
library(greenR)
data <- get_osm_data("Oerlikon, Zurich, Switzerland")
index <- calculate_green_index(data, 2056)
map <- save_as_leaflet(index, "/Users/smahajan/Downloads/map.html")
git pull origin main
library(greenR)
run_app()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data <- get_osm_data("Thalwil, Zurich, Switzerland")
green <- calculate_green_index(data, 2056)
git config pull.rebase false
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
