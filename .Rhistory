if (is.null(green_areas_data$osm_polygons) || nrow(green_areas_data$osm_polygons) == 0) {
stop("'osm_polygons' is NULL or has no rows.")
}
# Ensure 'osm_polygons' is an sf object
if (!inherits(green_areas_data$osm_polygons, "sf")) {
stop("'osm_polygons' should be an 'sf' object.")
}
green_areas <- green_areas_data$osm_polygons
# Print the structure of green_areas for debugging
print(str(green_areas))
centroids <- st_centroid(green_areas)
# Extract coordinates
coords <- st_coordinates(centroids)
# Perform hierarchical clustering
dist_matrix <- dist(coords)
hclust_res <- hclust(dist_matrix)
# Determine the optimal number of clusters using silhouette analysis
optimal_clusters <- 2 # Start with 2 clusters for silhouette analysis
max_avg_sil_width <- 0
for (k in 2:10) { # Check silhouette for k=2 to k=10 clusters
cluster_assignments <- cutree(hclust_res, k)
sil_widths <- silhouette(cluster_assignments, dist_matrix)
avg_sil_width <- mean(sil_widths[, 'sil_width'])
if (avg_sil_width > max_avg_sil_width) {
max_avg_sil_width <- avg_sil_width
optimal_clusters <- k
}
}
# Cut the dendrogram to create the optimal number of clusters
cluster_assignments <- cutree(hclust_res, optimal_clusters)
green_areas$cluster <- cluster_assignments
# Create convex hulls for each cluster
cluster_hulls <- green_areas %>%
group_by(cluster) %>%
summarise(geometry = st_convex_hull(st_union(geometry))) %>%
ungroup()
# Define colors for clusters
pal <- colorFactor(rainbow(optimal_clusters), domain = cluster_assignments)
# Create a Leaflet map
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap) # Add default OpenStreetMap tiles
# Add the clustered green areas to the map
map <- map %>%
addPolygons(
data = green_areas,
fillColor = ~pal(cluster),
fillOpacity = 0.5,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
popup = ~paste("Cluster:", cluster,
"<br>Number of Green Spaces:", length(cluster),
"<br>Average Area (sqm):", mean(st_area(green_areas[cluster == cluster, ]))),
group = "Green Spaces"
)
# Add convex hulls as a separate layer
map <- map %>%
addPolygons(
data = cluster_hulls,
fillColor = NA,
color = pal(cluster_hulls$cluster),
weight = 2,
dashArray = "3",
group = "Cluster Boundaries"
)
# Add layer control to allow toggling layers on and off
map <- map %>%
addLayersControl(
overlayGroups = c("Green Spaces", "Cluster Boundaries"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
position = "bottomright",
pal = pal,
values = ~cluster,
title = "Cluster",
opacity = 1
)
# Return the map
return(map)
}
visualize_green_space_hclust(green_areas)
library(greenR)
data <- get_osm_data("Bern, Switzerland")
ga <- data$green_areas
green_space_clustering(ga, num_clusters = 4)
data <- get_osm_data("Basel, Switzerland")
ga <- data$green_areas
green_space_clustering(ga, num_clusters = 3)
green_space_clustering(ga, num_clusters = 2)
green_space_clustering(ga, num_clusters = 5)
library(greenR)
data <- get_osm_data("Basel, Switzerland")
ga <- data$green_areas
green_space_clustering(ga, num_clusters = 5)
green_space_clustering(ga, num_clusters = 3)
visualize_green_spaces(ga)
accessibility_greenspace(ga, 47.55103695580605, 7.603437680438542, max_walk_time = 20)
library(greenR)
zurich <- get_osm_data("Zurich, Switzerland")
zurich_sf <- zurich$green_areas$osm_polygons
manchester <- get_osm_data("Manchester, UK")
manchester_sf <- manchester$green_areas$osm_polygons
manchester <- get_osm_data("Manchester, UK")
manchester_sf <- manchester$green_areas$osm_polygons
taipei <- get_osm_data("Taipei, Taiwan")
taipei_sf <- taipei$green_areas$osm_polygons
medellin <- get_osm_data("Medellin, Colombia")
medellin_sf <- medellin$green_areas$osm_polygons
new_delhi <- get_osm_data("New Delhi, India")
new_delhi_sf <- new_delhi$green_areas$osm_polygons
san_francisco <- get_osm_data("San Francisco, USA")
san_francisco_sf <- san_francisco$green_areas$osm_polygons
toronto <- get_osm_data("Toronto, Canada")
toronto_sf <- toronto$green_areas$osm_polygons
kyoto <- get_osm_data("Kyoto, Japan")
kyoto_sf <- kyoto$green_areas$osm_polygons
milan <- get_osm_data("milan, Italy")
milan_sf <- milan$green_areas$osm_polygons
geneva <- get_osm_data("Geneva, Switzerland")
geneva_sf <- geneva$green_areas$osm_polygons
# Create a list of all the sf objects
green_spaces_list <- list(zurich_sf, geneva_sf, manchester_sf, taipei_sf, medellin_sf,
new_delhi_sf, san_francisco_sf, toronto_sf, kyoto_sf, milan_sf)
gssi_values <- gssi(green_spaces_list)
print(gssi_values)
library(greenR)
data1 <- get_osm_data("Zurich, Switzerland")
z_sf <- data1$green_areas$osm_polygons
data2 <- get_osm_data("Medellin, Colombia")
msf <- data2$green_areas$osm_polygons
list <- c(z_sf, msf)
#' Calculate Green Space Comparative Similarity Index (GSCSI)
#'
#' This function computes a ratio-based Green Space Comparative Similarity Index (GSCSI) for
#' a list of administrative areas by comparing the total area of green spaces
#' and the spatial distribution of these spaces between each area. It transforms
#' the spatial data to an equal-area projection before calculating the areas
#' and uses a ratio-based approach to determine similarity across areas.
#'
#' @param green_spaces_list A list where each element is an sf object containing
#'                          green spaces data for an administrative area.
#' @param equal_area_crs The coordinate reference system to use for equal-area projection.
#'                       Defaults to "ESRI:54009" which is a World Mollweide projection.
#'
#' @return A matrix with GSCSI values comparing each area with every other area.
#'
#' @importFrom sf st_transform st_area
#' @export
#' @examples
#' \dontrun{
#'   # Assuming green_spaces_list is a list of sf objects for different areas
#'   gscsi_matrix <- gscsi(green_spaces_list)
#'   print(gscsi_matrix)
#' }
gscsi <- function(green_spaces_list, equal_area_crs = "ESRI:54009") {
# Validate inputs
if (!is.list(green_spaces_list)) {
stop("green_spaces_list must be a list.", call. = FALSE)
}
if (!all(sapply(green_spaces_list, inherits, "sf"))) {
stop("All items in green_spaces_list must be sf objects.", call. = FALSE)
}
if (!is.character(equal_area_crs)) {
stop("equal_area_crs must be a character string representing a CRS.", call. = FALSE)
}
# Calculate total area for each administrative area after projecting to equal-area CRS
total_areas <- sapply(green_spaces_list, function(sf_object) {
sf_object_transformed <- sf::st_transform(sf_object, crs = equal_area_crs)
sum(sf::st_area(sf_object_transformed))
})
# Initialize matrix to store GSCSI values
num_areas <- length(green_spaces_list)
gscsi_matrix <- matrix(NA, nrow = num_areas, ncol = num_areas)
# Calculate GSCSI for each pair of administrative areas
for (i in 1:num_areas) {
for (j in 1:num_areas) {
if (i != j) {
gscsi_matrix[i, j] <- min(total_areas[i], total_areas[j]) / max(total_areas[i], total_areas[j])
}
}
}
# Return the GSCSI matrix
return(gscsi_matrix)
}
x <- gscsi(list)
#' Calculate Green Space Similarity Index (GSSI) for Comparative Analysis
#'
#' This function computes a Green Space Similarity Index (GSSI) for comparative
#' analysis across different cities or neighborhoods by comparing the total area
#' of green spaces and the spatial distribution of these spaces between each area.
#' It uses a ratio-based approach to determine similarity, incorporating both
#' the size and proximity of green spaces.
#'
#' @param green_spaces_list A list where each element is an sf object containing
#'                          green spaces data for a city or neighborhood.
#' @param equal_area_crs The coordinate reference system to use for equal-area projection.
#'                       Defaults to "ESRI:54009" which is a World Mollweide projection.
#'
#' @return A matrix with GSSI values for each pairwise comparison of areas.
#'
#' @importFrom sf st_transform st_area st_coordinates
#' @importFrom spatstat.geom owin as.ppp nndist
#' @export
#' @examples
#' \dontrun{
#'   # Assuming green_spaces_list is a list of sf objects for different cities
#'   gssi_matrix <- gssi(green_spaces_list)
#'   print(gssi_matrix)
#' }
gssi <- function(green_spaces_list, equal_area_crs = "ESRI:54009") {
# Validate inputs
if (!is.list(green_spaces_list)) {
stop("green_spaces_list must be a list.", call. = FALSE)
}
if (!all(sapply(green_spaces_list, inherits, "sf"))) {
stop("All items in green_spaces_list must be sf objects.", call. = FALSE)
}
if (!is.character(equal_area_crs)) {
stop("equal_area_crs must be a character string representing a CRS.", call. = FALSE)
}
n_areas <- length(green_spaces_list)
gssi_matrix <- matrix(NA, nrow = n_areas, ncol = n_areas)
names(gssi_matrix) <- names(green_spaces_list)
# Process each area
for (i in 1:n_areas) {
for (j in 1:n_areas) {
if (i != j) {
# Calculate similarity between area i and area j
gssi_matrix[i, j] <- calculate_similarity(green_spaces_list[[i]], green_spaces_list[[j]], equal_area_crs)
}
}
}
# Return the GSSI matrix
return(gssi_matrix)
}
calculate_similarity <- function(area_i, area_j, equal_area_crs) {
# Transform projections
area_i_transformed <- sf::st_transform(area_i, crs = equal_area_crs)
area_j_transformed <- sf::st_transform(area_j, crs = equal_area_crs)
# Calculate total areas
total_area_i <- sum(sf::st_area(area_i_transformed))
total_area_j <- sum(sf::st_area(area_j_transformed))
# Area similarity
area_similarity <- min(total_area_i, total_area_j) / max(total_area_i, total_area_j)
# Calculate proximity factors
proximity_similarity <- calculate_proximity_similarity(area_i_transformed, area_j_transformed)
# Combine metrics (here, using a weighted average for example)
# Weights can be adjusted as needed to emphasize area or proximity
area_weight <- 0.5
proximity_weight <- 0.5
combined_similarity <- (area_weight * area_similarity) + (proximity_weight * proximity_similarity)
return(combined_similarity)
}
calculate_proximity_similarity <- function(area_i, area_j) {
# Convert sf objects to spatstat point patterns
ppp_i <- sf::st_coordinates(area_i) %>% spatstat.geom::as.ppp()
ppp_j <- sf::st_coordinates(area_j) %>% spatstat.geom::as.ppp()
# Calculate cross nearest neighbor distances between two areas
nn_distances <- spatstat.geom::crossnndist(ppp_i, ppp_j)
# Use inverse of average distance for similarity measure (larger distance = less similar)
# This part can be adjusted based on the desired proximity measure
proximity_similarity <- 1 / mean(nn_distances)
return(proximity_similarity)
}
m <- gssi(list)
library(greenR)
calculate_and_visualize_GVI("/Users/smahajan/Downloads/test_gv.png")
result <- calculate_and_visualize_GVI("/Users/smahajan/Downloads/test_gv.png")
green_pixels_raster <- as.raster(result$green_pixels_image) #To visualize green pixels
plot(green_pixels_raster)
library(greenR)
zh <- get_osm_data("Zurich, Switzerland")
zh_sf <- zh$green_areas$osm_polygons
gv <- get_osm_data("Geneva, Switzerland")
gv_sf <- gv$green_areas
zh_sf <- zh$green_areas
list <- list(gv_sf, zh_sf)
x <- gssi(list)
zh_sf <- zh$green_areas$osm_polygons
gv_sf <- gv$green_areas$osm_polygons
list <- list(gv_sf, zh_sf)
x <- gssi(list)
x
get_city_green_areas <- function(city_name) {
city_data <- get_osm_data(city_name)
return(city_data$green_areas$osm_polygons)
}
cities <- c("Zurich", "Madrid", "Milan", "Taipei", "San Francisco", "Kyoto", "New Delhi", "Istanbul", "Medellin", "Toronto")
green_spaces_list <- lapply(cities, get_city_green_areas)
green_spaces_list <- lapply(cities, get_city_green_areas)
ml <- get_osm_data("Milan, Italy")
ml_sf <- ml$green_areas$osm_polygons
tpe <- get_osm_data("Taipei, Taiwan")
tpe_sf <- tpe$green_areas$osm_polygons
kyoto <- get_osm_data("Kyoto, Japan")
medellin <- get_osm_data("Medellin, Colombia")
med_sf <- medellin$green_areas$osm_polygons
delhi <- get_osm_data("New Delhi, India")
delhi_sf <- delhi$green_areas$osm_polygons
toronto <- get_osm_data("Toronto, Canada")
toronto <- get_osm_data("Toronto, Canada")
toronto_sf <- toronto$green_areas$osm_polygons
sanfran <- get_osm_data("San Francisco, United States")
sanfran_sf <- sanfran$green_areas$osm_polygons
istanbul <- get_osm_data("Istanbul, Turkey")
Osaka <- get_osm_data("Osaka, Japan")
kyoto <- get_osm_data("Kyoto, Japan")
Tokyo <- get_osm_data("Tokyo, Japan")
Manchester <- get_osm_data("Manchester, UK")
manchester_sf <- Manchester$green_areas$osm_polygons
Singapore <- get_osm_data("Singapore")
mxc <- get_osm_data("Mexico City, Mexico")
mxc <- get_osm_data("Mexico City, Mexico")
mxc_sf <- mxc$green_areas$osm_polygons
Singapore <- get_osm_data("Singapore")
Singapore <- get_osm_data("Singapore, Singapore")
Q
Kyoto <- get_osm_data("Kyoto, Japan")
Q
mumbai <- get_osm_data("Mumbai, India")
mumbai_sf <- mumbai$green_areas$osm_polygons
list <- list(zh_sf, mumbai_sf, delhi_sf, toronto_sf, mxc_sf, med_sf, tpe_sf, toronto_sf, sanfran_sf, ml_sf)
x <- gssi(list)
x
list <- list(zh_sf, mumbai_sf, delhi_sf, toronto_sf, mxc_sf, med_sf, tpe_sf, manchester_sf, sanfran_sf, ml_sf)
x <- gssi(list)
x
list <- list(zh_sf, mumbai_sf, delhi_sf, toronto_sf, mxc_sf, med_sf, tpe_sf, toronto_sf, sanfran_sf, ml_sf, gv_sf)
x <- gssi(list)
x
man <- Manchester$green_areas
visualize_green_spaces(man)
library(plotly)
# City names and their GSSI values
cities <- c("Manchester", "Zurich", "Medellin", "Milan", "San Francisco",
"Taipei", "New Delhi", "Toronto", "Mumbai", "Mexico City")
gssi_values <- c(1.00, 0.61, 0.51, 0.42, 0.25, 0.19, 0.37, 0.13, 0.14, 0.03)
# Create a data frame
df <- data.frame(cities, gssi_values)
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 100, sizemode = 'area',
opacity = 0.5, line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = 'Green Space Similarity Index (GSSI) Comparison Among Cities',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'))
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 150,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = 'Green Space Similarity Index (GSSI) Comparison Among Cities',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 200,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = 'Green Space Similarity Index (GSSI) Comparison Among Cities',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 250,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = 'Green Space Similarity Index (GSSI) Comparison Among Cities',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 350,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = 'Green Space Similarity Index (GSSI) Comparison Among Cities',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 400,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = ,
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = YES)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 400,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = '',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = YES)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 400,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = '',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = TRUE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 400,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = '',
xaxis = list(title = 'Cities'),
yaxis = list(title = 'GSSI Value'),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 150,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = '',
titlefont = list(size = 14),
xaxis = list(title = 'Cities', titlefont = list(size = 14), tickfont = list(size = 14)),
yaxis = list(title = 'GSSI Value', titlefont = list(size = 14), tickfont = list(size = 14)),
showlegend = FALSE)
colors <- RColorBrewer::brewer.pal(10, "Set3")
# Create a bubble chart
plot_ly(df, x = ~cities, y = ~gssi_values, type = 'scatter', mode = 'markers',
marker = list(size = ~gssi_values * 450,  # Increased size factor
sizemode = 'area',
color = colors,
opacity = 0.7,
line = list(width = 2, color = 'rgb(0, 0, 0)'))) %>%
layout(title = '',
titlefont = list(size = 14),
xaxis = list(title = 'Cities', titlefont = list(size = 14), tickfont = list(size = 14)),
yaxis = list(title = 'GSSI Value', titlefont = list(size = 14), tickfont = list(size = 14)),
showlegend = FALSE)
library(greenR)
data <- get_osm_data("Medellin, Colombia")
green_index <- calculate_green_index(data, 6257)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.DarkMatter")
print(map)
library(htmlwidgets)
saveWidget(map, file = "medellin.html")
percentage <- calculate_percentage(green_index)
data <- get_osm_data("Taipei, Taiwan")
data <- get_osm_data("Taipei, Taiwan")
data <- get_osm_data("Zurich, Switzerland")
green_index <- calculate_green_index(data, 2056)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.DarkMatter")
print(map)
percentage <- calculate_percentage(green_index)
library(htmlwidgets)
saveWidget(map, file = "/Users/smahajan/Downloads/zh.html")
data <- get_osm_data("Taipei, Taiwan")
data <- get_osm_data("Toronto, Canada")
data <- get_osm_data("Toronto, Canada")
library(greenR)
data <- get_osm_data("Taipei, Taiwan")
green_index <- calculate_green_index(data, 3826)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.DarkMatter")
print(map)
library(htmlwidgets)
saveWidget(map, file = "/Users/smahajan/Downloads/tw.html")
percentage <- calculate_percentage(green_index)
data <- get_osm_data("New Delhi, India")
green_index <- calculate_green_index(data, 7760)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.Positron")
print(map)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.DarkMatter")
print(map)
percentage <- calculate_percentage(green_index)
saveWidget(map, file = "/Users/smahajan/Downloads/del.html")
library(greenR)
run_app()
run_app()
run_app()
library(greenR)
run_app()
library(greenR)
